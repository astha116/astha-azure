# azure-pipelines.yml
trigger:
  branches:
    include:
      - main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  - group: terraform-vars
  
stages:
  - stage: Terraform
    displayName: 'Terraform Deploy'
    jobs:
      - job: Terraform
        displayName: 'Terraform Init, Plan & Apply'
        steps:

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.3.5'

          # Initialize Terraform with backend
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'terraform-azure-conn'
              backendAzureRmResourceGroupName: 'astha-azure'
              backendAzureRmStorageAccountName: 'tfstate20055'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

          # Plan - Terraform will automatically pick up .tfvars files
          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceNameAzureRM: 'terraform-azure-conn'
              commandOptions: '-detailed-exitcode -lock-timeout=5m'

          # Apply - Terraform will automatically pick up .tfvars files
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceNameAzureRM: 'terraform-azure-conn'
              commandOptions: '-auto-approve -lock-timeout=5m'
