# Azure DevOps Pipeline for Node.js App to AKS
trigger:
  branches:
    include:
    - main
    - dev
  paths:
    include:
    - src/*
    - Dockerfile
    - Manifests/*
    - azure-pipelines.yml

# Variables
variables:
  # Container Registry Service Connection - you'll need to create this
  dockerRegistryServiceConnection: 'my-docker-conn'
  imageRepository: 'nodejs-app'
  containerRegistry: 'asthaazureregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Service Connection - you'll need to create this
  kubernetesServiceConnection: 'my-aks-conn'
  kubernetesNamespace: 'default'
  
  # Agent Pool
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push Image
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: Default
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '18.x'
    
    - script: |
        cd src
        npm install
        npm run test
      displayName: 'Install dependencies and run tests'
    
    - task: Docker@2
      displayName: Build and push image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Kubernetes manifests'
      inputs:
        artifactName: 'manifests'
        path: '$(Build.SourcesDirectory)/Manifests'

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      name: Default
      vmImage: $(vmImageName)
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download manifests'
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'
          
          - task: KubernetesManifest@0
            displayName: 'Deploy to Kubernetes cluster'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(kubernetesNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yaml
                $(System.ArtifactsDirectory)/manifests/service.yaml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
          
          - task: KubernetesManifest@0
            displayName: 'Deploy Ingress (if exists)'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(kubernetesNamespace)
              manifests: '$(System.ArtifactsDirectory)/manifests/ingress.yaml'
            continueOnError: true