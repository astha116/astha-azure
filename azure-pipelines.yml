# Azure DevOps Pipeline for Node.js App to AKS
trigger:
  branches:
    include:
    - main
    - dev
  paths:
    include:
    - src/*
    - Dockerfile
    - Manifest-files/*
    - azure-pipelines.yml

# Variables

variables:
- group: keyvault-secrets   

- name: dockerRegistryServiceConnection 
  value: my-docker-conn

- name: imageRepository
  value: nodejs-app

- name: containerRegistry
  value: asthaazureregistry.azurecr.io

- name: dockerfilePath
  value: $(Build.SourcesDirectory)/Dockerfile

- name: tag
  value: $(Build.BuildId)

- name: kubernetesServiceConnection
  value: my-aks-conn

- name: kubernetesNamespace
  value: default

- name: vmImageName
  value: ubuntu-latest

- name: sonarQubeUrl
  value: 'https://sonarcloud.io'

- name: sonarQubeProjectKey
  value: 'asthajain1160521_astha-azure'

- name: sonarQubeProjectName
  value: 'astha-azure'


stages:
- stage: Build
  displayName: Build and Push Image
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: Default
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '18.x'
    
    - script: |
        cd src
        npm install
        npm run test
      displayName: 'Install dependencies and run tests'

    # 2) Download & install SonarScanner CLI **for Windows**
    - powershell: |
        $ErrorActionPreference = 'Stop'
        $ver  = '5.0.1.3006'
        $zip  = "sonar-scanner-cli-$ver-windows.zip"
        Write-Host "Downloading $zip ..."
        Invoke-WebRequest -Uri "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/$zip" -OutFile $zip

        Write-Host "Extracting ..."
        Expand-Archive -Path $zip -DestinationPath .

        # Add scanner\bin to PATH for this session
        $scannerDir = (Get-ChildItem sonar-scanner-* -Directory)[0].FullName
        $env:PATH   = "$scannerDir\bin;$env:PATH"

        # Quick check
        sonar-scanner.bat -v
      displayName: 'Install SonarScanner CLI (Windows)'

    # 3) Run the analysis â€“ pass the token via env-var so it is masked
    - powershell: |
        $scannerDir = (Get-ChildItem sonar-scanner-* -Directory).FullName
        $env:PATH   = "$scannerDir\bin;$env:PATH"

        sonar-scanner.bat `
          -D"sonar.projectKey=$(sonarQubeProjectKey)" `
          -D"sonar.projectName=$(sonarQubeProjectName)" `
          -D"sonar.projectVersion=$(Build.BuildNumber)" `
          -D"sonar.sources=src" `
          -D"sonar.exclusions=**\node_modules\**" `
          -D"sonar.host.url=$(sonarQubeUrl)" `
          -D"sonar.organisation=asthajain1160521" `
          -D"sonar.login=$env:SONAR_TOKEN"
      displayName: 'Run SonarQube analysis'
      env:
        SONAR_TOKEN: $(azure-sonarqube)
    - task: Docker@2
      displayName: Build and push image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/dev')))
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Kubernetes manifests'
      inputs:
        artifactName: 'manifests'
        path: '$(Build.SourcesDirectory)/Manifest-files/'

- stage: Deploy
  displayName: Deploy to AKS with Helm
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy via Helm
    pool:
      name: Default
      vmImage: $(vmImageName)
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'latest'

          - task: HelmDeploy@0
            displayName: 'Helm upgrade/install release'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(kubernetesNamespace)
              command: upgrade
              chartType: FilePath
              chartPath: '$(Build.SourcesDirectory)/Manifest-files'
              releaseName: 'nodejs-app'
              overrideValues: |
                image.repository=$(containerRegistry)/$(imageRepository)
                image.tag=$(tag)
              install: true
